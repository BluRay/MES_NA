<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.byd.bms.production.dao.IProductionDao">
<!-- ########################### xiong jianwu start#############################-->
	<select id="queryLineProcessList" parameterType="Map" resultType="Map">
		SELECT p.line line_name,p.workshop workshop_name,p.factory factory_name,
		concat('[',group_concat('{"id":',p.id,',"code":"',TRIM(p.station_code),'","status":"',(case when s.abnormal_qty>0 then 'abnormal' else 'normal' end ),       
		'","monitor_flag":"',p.monitory_point_flag,'","name":"',TRIM(p.station_name),'","plan_node":"',ifnull(k.key_name,''),'"}' order by p.id),']') process_list
		FROM BMS_NA_BASE_STATION p
		left join BMS_NA_BASE_KEY k on k.value=p.plan_node_id and k.key_code='PLAN_CODE'
		left join ( select count(a.bus_number) abnormal_qty,p.id,p.station_code
		from BMS_NA_PRODUCTION_ABNORMITY a
		left join BMS_NA_BASE_STATION p on a.abnormal_station_id=p.id
		where (a.measures is null or a.measures='') and a.plant=#{factory} and a.workshop=#{workshop}
		group by p.id			
		)s on s.id=p.id
		where p.factory=#{factory} and p.workshop=#{workshop} and p.delete_flag='0'
		group by p.line
	</select>
   <select id="getVinList" parameterType="Map" resultType="Map">
		SELECT b.*,u.username,p.edit_date FROM BMS_NA_PROJECT_BUS b
		LEFT JOIN BMS_NA_PROJECT p ON b.project_id = p.id
		LEFT JOIN BMS_NA_BASE_USER u ON u.id=p.editor_id
		where 1=1
		<if test="project_id !=null and project_id !=''">
			and b.project_id like CONCAT(#{project_id},'%')   
		</if>
		ORDER BY b.id
		<if test="start !=null and length !=-1 ">
			LIMIT #{start} ,#{length} 
		</if>			
	</select>

	<select id="queryProcessMonitorList" parameterType="Map" resultType="Map">
		select p.id,p.station_code,r.station_name,k.key_name plan_node_name,k.key_name_en field_name
		from BMS_NA_BASE_SCAN_RULE r
		left join BMS_NA_BASE_STATION p on r.factory=p.factory and r.workshop=p.workshop 
		and p.line=#{line} and p.station_name=r.station_name 
		left join BMS_NA_BASE_KEY k on k.value=p.plan_node_id and k.key_code='PLAN_CODE'
		where p.monitory_point_flag='1' and p.delete_flag='0' 
		and r.factory=#{factory} and r.workshop=#{workshop} and p.line=#{line} 
		and r.order_type=#{order_type}
		order by r.sequence asc
	</select>
	
	<select id="queryBusInfo" parameterType="String" resultType="Map">
		select b.*,o.project_name AS order_desc,o.production_plant factory,p.workshop,p.line,p.station_name,
		'Standard order' order_type,o.bus_type,
		case (select count(r.id) from BMS_NA_BUS_SCANNING_RECORD r where r.bus_number=#{bus_number} and r.station_id=b.latest_station_id and r.rework='0' and r.on_offline='offline') 
		when 0 then 'online' else 'offline' end as on_offline
		from BMS_NA_PROJECT_BUS b
		left join BMS_NA_PROJECT o on b.project_id=o.id
		left join BMS_NA_BASE_STATION p on p.id=b.latest_station_id
		where b.bus_number=#{bus_number}
	</select>
	
	<select id="queryKeyParts" parameterType="Map" resultType="Map">
		select ptd.*,p.id parts_id,p.bus_number,p.batch
		from BMS_NA_PROJECT_TRACE_TEMPLATE ptd
		left join BMS_NA_BUS_TRACE p on p.trace_template_id=ptd.id and p.bus_number=#{bus_number} and p.production_plant_id=#{factory_id}
		where ptd.project_id=#{project_id}  and ptd.workshop=#{workshop}
		and ptd.station=#{station_name}
	</select>
	
	<select id="queryNextStation" parameterType="Map" resultType="Map">
		SELECT p.id station_id,p.station_name,r.sequence,r.workshop,
		<if test="on_offline=='online'">'offline'</if>
		<if test="on_offline=='offline'">'online'</if>
		on_offline
		FROM BMS_NA_BASE_SCAN_RULE r
		LEFT JOIN BMS_NA_BASE_STATION p on r.factory=p.factory and r.workshop=p.workshop 
		and p.station_name=r.station_name 
		where r.factory=#{factory_name} 
		<if test="station_name !=null and station_name !='' and on_offline=='offline' ">
		and r.sequence>=(
			select r1.sequence+1 from BMS_NA_BASE_SCAN_RULE r1 where r1.factory=#{factory_name}
			and r1.station_name=#{station_name} and r1.order_type=#{order_type})
		</if>	
		<if test="station_name !=null and station_name !='' and on_offline=='online' ">
			and r.station_name=#{station_name}
		</if>	
		and r.order_type=#{order_type}  and p.monitory_point_flag='1'
		order by r.sequence 
		limit 1
	</select>
	
	<insert id="saveParts" parameterType="List"  useGeneratedKeys="true" keyProperty="id">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_NA_BUS_TRACE
		(bus_number,production_plant_id,trace_template_id,workshop,SAP_material,BYD_NO,parts_name,vendor,station,batch,editor_id,edit_date)
		values
		<foreach  collection="parts_list" item="detail" index="index" separator=",">
		(#{detail.bus_number},#{detail.production_plant_id},#{detail.id},#{detail.workshop},#{detail.SAP_material},#{detail.BYD_NO},
		#{detail.parts_name},#{detail.vendor},#{detail.station_name},#{detail.batch},#{detail.editor_id},#{detail.edit_date}
		)
		</foreach>
	</insert>
	
	<update id="updateParts" parameterType="List" >
		update BMS_NA_BUS_TRACE set
		batch=
		<foreach collection="parts_list" item="detail" index="index" separator="" open=" case id" close="end">
			when #{detail.parts_id} then #{detail.batch}
		</foreach>
		where id in
		<foreach collection="parts_list" item="detail" index="index" separator="," open=" (" close=")">
			#{detail.parts_id}
		</foreach>
	
	</update>
	
	<insert id="saveScanRecord" parameterType="Map"  useGeneratedKeys="true" keyProperty="id">
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into BMS_NA_BUS_SCANNING_RECORD (bus_number,project_id,plant,workshop,line,station_id,station,rework,on_offline,scanner_id,scan_date)
		values
		(#{bus_number},#{project_id},#{factory_name},#{workshop_name},#{line_name},#{station_id},#{station_name},#{rework},#{on_offline},#{editor_id},#{edit_date})
	</insert>
	
	<update id="updateBusProcess" parameterType="Map">
		update BMS_NA_PROJECT_BUS set latest_station_id=#{station_id},current_station=#{station_name}
		where bus_number=#{bus_number}
	</update>
	
	<update id="updateBusPlanNodeDate" parameterType="Map">
		update BMS_NA_PROJECT_BUS set ${field_name}=#{edit_date}
		where bus_number=#{bus_number}
	</update>
	
	<select id="queryLastScanNode" parameterType="Map" resultType="Map">
		SELECT p.id station_id,p.station_name,r.sequence
		FROM BMS_NA_BASE_SCAN_RULE r
		LEFT JOIN BMS_NA_BASE_STATION p on r.factory=p.factory and r.workshop=p.workshop 
		and p.station_name=r.station_name and p.line=#{line_name}		
		where r.factory=#{factory_name} and r.sequence&lt;=(
			select r1.sequence-1 from BMS_NA_BASE_SCAN_RULE r1 where r1.factory=#{factory_name} 
			and r1.station_name=#{station_name} and r1.order_type=#{order_type})
		and r.order_type=#{order_type} 
		order by r.sequence desc
		limit 1
	</select>
	
	<select id="queryScanLastScanNode" parameterType="Map" resultType="Map">		
		SELECT s.id,s.station,s.scan_date
		FROM BMS_NA_BUS_SCANNING_RECORD s 
		where s.station=#{last_station_name} and s.bus_number=#{bus_number}  and s.rework='0' and s.on_offline='offline'
		order by s.scan_date desc limit 1
	</select>
	
	<select id="queryScanNodeRecord" parameterType="Map" resultType="Map">
		SELECT s.id,s.station,s.scan_date
		FROM BMS_NA_BUS_SCANNING_RECORD s 
		where s.station=#{station_name} and s.bus_number=#{bus_number}  and s.rework='0' and s.on_offline=#{on_offline}
		order by s.scan_date desc limit 1
	</select>
	
	<select id="queryWeldingOnlineCount" parameterType="Map" resultType="int">
		select count(id) from BMS_NA_PROJECT_BUS 
		where production_plant_id=#{factory_id} and project_id=#{project_id}
		and welding_online>0
	</select>
	
	<select id="queryWarehouseInfo" parameterType="Map" resultType="Map">
		select count(b.id) warehouse_count, 
		(select p.quantity from BMS_NA_PROJECT p 
		where p.project_id=#{project_id}) production_qty
		from BMS_PLAN_BUS b 
		where b.production_plant_id=#{factory_id} and b.project_id=#{project_id} and b.outgoing>0
	</select>
	
	<update id="updateProject" parameterType="Map">
		update BMS_NA_PROJECT set project_status=#{status} where id=#{project_id}
	</update>
	
	<select id="queryStationList" parameterType="Map" resultType="Map">
		select distinct station_code, station_name from BMS_NA_BASE_STATION
		where factory=#{factory} 
		<if test="workshop !=null and workshop !=''">
			and workshop=#{workshop}
		</if>
		<if test="line !=null and line !=''">
			and line=#{line}
		</if>
	</select>
	
	<insert id="insertEcnHead" parameterType="Map" useGeneratedKeys="true" keyProperty="id">
		insert into BMS_NA_ECN_HEAD (project_id,project,ecn_no,pictures,design_people,creator_id,create_date)
		values
		(#{project_id},#{project},#{ecn_no},#{pictures},#{design_people},#{creator_id},#{create_date})
	</insert>
	
	<insert id="batchInsertEcnItems" parameterType="List" useGeneratedKeys="true" keyProperty="id">
		insert into BMS_NA_ECN_ITEM (ecn_id,item_no,items,problem_details,work_station,scope_change,status)
		values
		<foreach collection="list" item="item" index="index" separator=",">		
			(#{item.ecn_id},#{item.item_no},#{item.items},#{item.problem_details},#{item.work_station},
			#{item.scope_change},'1')
		</foreach>
		
	</insert>

	<insert id="batchInsertItemBus" parameterType="List" useGeneratedKeys="true" keyProperty="id">
		insert into BMS_NA_ECN_ITEM_BUS (ecn_item_id,bus_number)
		values
		<foreach collection="list" item="item" index="index" separator=",">		
			(#{item.ecn_item_id},#{item.bus_number})
		</foreach>
		
	</insert>
	
	<insert id="batchInsertMaterial" parameterType="List" useGeneratedKeys="true" keyProperty="id">
		insert into BMS_NA_ECN_ITEM_MATERIAL (ecn_item_id,item_no,SAP_material,BYD_NO,description,specification,qty,note)
		values
		<foreach collection="list" item="item" index="index" separator=",">		
			(#{item.ecn_item_id},#{item.item_no},#{item.SAP_material},#{item.BYD_NO},#{item.description},
			#{item.specification},#{item.qty},#{item.note})
		</foreach>
		
	</insert>
	
	<select id="queryEcnItemList" parameterType="Map" resultType="Map">
		select h.id ecn_id,h.project_id,h.project,p.project_name,h.ecn_no,h.pictures,h.design_people,i.status,p.production_plant factory,
		i.id ecn_item_id,i.item_no,i.items,i.problem_details,i.work_station,i.signed_time_first,i.finished_time,
		(select group_concat(b.bus_number) from BMS_NA_ECN_ITEM_BUS b where b.ecn_item_id=i.id) as bus_list
		from BMS_NA_ECN_HEAD h
		left join BMS_NA_ECN_ITEM i on h.id=i.ecn_id
		left join BMS_NA_PROJECT p on p.id=h.project_id
		where 1=1
		<if test="ecn_no !=null and ecn_no !=''">
			and h.ecn_no like concat('%',#{ecn_no},'%')
		</if>
		<if test="items !=null and items !=''">
			and i.items like concat('%',#{items},'%')
		</if>
		<if test="status !=null and status !='All'">
			and i.status = #{status}
		</if>
		<if test="start_date !=null and start_date !=''">
			and h.create_date >= #{start_date}
		</if>
		<if test="end_date !=null and end_date !=''">
			and h.create_date &lt;= #{end_date}
		</if>
		order by h.id
		<if test="start !=null and length !='-1' ">
			LIMIT #{start} ,#{length} 
		</if>	
		
		
	</select>
	
	<select id="queryEcnItemCount" parameterType="Map" resultType="int">
		select count(i.id)
		from BMS_NA_ECN_HEAD h
		left join BMS_NA_ECN_ITEM i on h.id=i.ecn_id		
		where 1=1
		<if test="ecn_no !=null and ecn_no !=''">
			and h.ecn_no like concat('%',#{ecn_no},'%')
		</if>
		<if test="items !=null and items !=''">
			and i.items like concat('%',#{items},'%')
		</if>
		<if test="status !=null and status !='All'">
			and i.status = #{status}
		</if>
		<if test="start_date !=null and start_date !=''">
			and h.create_date >= #{start_date}
		</if>
		<if test="end_date !=null and end_date !=''">
			and h.create_date &lt;= #{end_date}
		</if>
	</select>
	
	<select id="queryItemListByEcn" parameterType="String" resultType="Map">
		select i.* from BMS_NA_ECN_ITEM i
		where i.ecn_id=#{ecn_id}
	</select>
	
	<select id="queryEcnMaterialByItem" parameterType="String" resultType="Map">
		select m.* from BMS_NA_ECN_ITEM_MATERIAL m
		where m.ecn_item_id=#{ecn_item_id}
	</select>
	
	<update id="updateEcnHead" parameterType="Map">
		update BMS_NA_ECN_HEAD set ecn_no=#{ecn_no},pictures=#{pictures},design_people=#{design_people},creator_id=#{creator_id},create_date=#{create_date}
		where id=#{ecn_id}
	</update>
	
	<update id="batchUpdateEcnItems" parameterType="List">
		<foreach collection="list" item="item" index="index" open="" close="" separator=";">
		update BMS_NA_ECN_ITEM set item_no=#{item.item_no},items=#{item.items},problem_details=#{item.problem_details},
		work_station=#{item.work_station},scope_change=#{item.scope_change}
		where id=#{item.id}
		</foreach>
	</update>
	
	<delete id="deleteMaterialByItem" parameterType="String">
		delete from BMS_NA_ECN_ITEM_MATERIAL where ecn_item_id=#{ecn_item_id}
	</delete>
	
	<delete id="deleteEcnBusByItem" parameterType="String">
		delete from BMS_NA_ECN_ITEM_BUS where ecn_item_id=#{ecn_item_id}
	</delete>
	
	<delete id="deleteEcnItem" parameterType="String">
		delete from BMS_NA_ECN_ITEM where id=#{ecn_item_id}
	</delete>
	
	<select id="queryEcnBusList" parameterType="String" resultType="Map">
		select b.bus_number,i.work_station,b.confirmed_date,b.qc_date,b.production_people,b.qc,pb.production_plant_id,f.factory_name plant
		from BMS_NA_ECN_ITEM_BUS b
		left join BMS_NA_ECN_ITEM i on b.ecn_item_id=i.id
		left join BMS_NA_PROJECT_BUS pb on pb.bus_number=b.bus_number
		left join BMS_NA_BASE_FACTORY f on f.id=pb.production_plant_id
		where i.id=#{ecn_item_id}
	</select>
	
	<select id="queryMinEcnConfirmDate" parameterType="String" resultType="String">
		select ifnull(signed_time_first,"") from BMS_NA_ECN_ITEM
		where id=#{ecn_item_id}
	</select>
	
	<update id="updateEcnItem" parameterType="Map">
		update BMS_NA_ECN_ITEM 
		<trim prefix="set" suffixOverrides=",">
		  	<if test="signed_time_first !=null and signed_time_first !=''">
				signed_time_first=#{signed_time_first},
			</if>
			<if test="status !=null and status !=''">
				status=#{status},
			</if>
			<if test="finished_time !=null and finished_time !=''">
				finished_time=#{finished_time},
			</if>
		</trim>
		where id=#{ecn_item_id}
	</update>
	
	<update id="batchUpdateEcnBus" parameterType="List">
		<foreach collection="list" item="item" index="index" open="" close="" separator=";">
			update BMS_NA_ECN_ITEM_BUS 
			<trim prefix="set" suffixOverrides=",">
		  	<if test="item.confirmed_date !=null and item.confirmed_date !=''">
				confirmed_date=#{item.confirmed_date},
			</if>
			<if test="item.production_people !=null and item.production_people !=''">
				production_people=#{item.production_people},
			</if>
			<if test="item.qc !=null and item.qc !=''">
				qc=#{item.qc},
			</if>
			<if test="item.qc_date !=null and item.qc_date !=''">
				qc_date=#{item.qc_date},
			</if>
		</trim>
		where ecn_item_id=#{item.ecn_item_id} and bus_number=#{item.bus_number}	
		
		</foreach>
	</update>
	
	<select id="queryUnQCBusCount" parameterType="String" resultType="int">
		select count(id) from BMS_NA_ECN_ITEM_BUS where ecn_item_id=#{ecn_item_id} 
		and (qc_date&lt;=0 or qc_date is null)
	</select>
	
	<select id="queryWorkshopStock" parameterType="Map" resultType="Map">
		select count(a.bus_number) qty, 'Testing' key_name
		from (
		select count(r.id) pty,r.on_offline,r.bus_number
		from BMS_NA_BUS_SCANNING_RECORD r
		where r.station='Test' and r.plant=#{factory} and r.on_offline='online' and r.rework='0'
		group by r.bus_number,r.on_offline) a
		left join 
		(select count(r.id) pty,r.on_offline,r.bus_number
		from BMS_NA_BUS_SCANNING_RECORD r
		where r.station='Test' and r.plant=#{factory} and r.on_offline='offline' and r.rework='0'
		group by r.bus_number,r.on_offline) b 
		on a.bus_number=b.bus_number
		where a.pty>0 and (b.pty is null or b.pty=0)
		union all
		select count(a.bus_number) qty, 'Pre-Paint' key_name
		from (
		select count(r.id) pty,r.on_offline,r.bus_number
		from BMS_NA_BUS_SCANNING_RECORD r
		where r.station=(select station_name from BMS_NA_BASE_SCAN_RULE where factory=#{factory} and workshop='Painting' order by sequence asc limit 1)
		and r.plant=#{factory} and r.on_offline='online' and r.rework='0'
		group by r.bus_number,r.on_offline) a
		left join 
		(select count(r.id) pty,r.on_offline,r.bus_number
		from BMS_NA_BUS_SCANNING_RECORD r
		where r.station=(select station_name from BMS_NA_BASE_SCAN_RULE where factory=#{factory} and workshop='Painting' order by sequence asc  limit 1) 
		and r.plant=#{factory} and r.on_offline='offline' and r.rework='0'
		group by r.bus_number,r.on_offline) b 
		on a.bus_number=b.bus_number
		where a.pty>0 and (b.pty is null or b.pty=0)
		union all
		select count(a.bus_number) qty, 'Painting' key_name
		from (
		select count(r.id) pty,r.on_offline,r.bus_number
		from BMS_NA_BUS_SCANNING_RECORD r
		where r.station=(select station_name from BMS_NA_BASE_SCAN_RULE where factory=#{factory} and workshop='Painting' order by sequence desc limit 1)
		and r.plant=#{factory} and r.on_offline='online' and r.rework='0'
		group by r.bus_number,r.on_offline) a
		left join 
		(select count(r.id) pty,r.on_offline,r.bus_number
		from BMS_NA_BUS_SCANNING_RECORD r
		where r.station=(select station_name from BMS_NA_BASE_SCAN_RULE where factory=#{factory} and workshop='Painting' order by sequence desc  limit 1) 
		and r.plant=#{factory} and r.on_offline='offline' and r.rework='0'
		group by r.bus_number,r.on_offline) b 
		on a.bus_number=b.bus_number
		where a.pty>0 and (b.pty is null or b.pty=0)
		union all
		select count(b.bus_number) qty,'Post-Paint' key_name
		from BMS_NA_PROJECT_BUS b
		where b.painting_offline>0 and b.chassis_online &lt;=0 and production_plant_id=#{factory_id}
		union all
		select count(b.bus_number) qty,'Welding' key_name
		from BMS_NA_PROJECT_BUS b
		where b.welding_online>0 and b.welding_offline &lt;=0 and production_plant_id=#{factory_id}
		union all
		select count(b.bus_number) qty,'Chassis' key_name
		from BMS_NA_PROJECT_BUS b
		where b.chassis_online>0 and b.chassis_offline &lt;=0 and production_plant_id=#{factory_id}
		union all
		select count(b.bus_number) qty,'Assembly' key_name
		from BMS_NA_PROJECT_BUS b
		where b.assembly_online>0 and b.assembly_offline &lt;=0 and production_plant_id=#{factory_id}
		union all
		select count(b.bus_number) qty,'Outgoing' key_name
		from BMS_NA_PROJECT_BUS b
		where b.outgoing>0 and b.delivery &lt;=0 and production_plant_id=#{factory_id}
	</select>
	
	<select id="queryMonitorBusList" parameterType="Map" resultType="Map">
		select concat('Line',s.line,' ',s.station_code,' ',s.station_name) station,b.bus_number,b.VIN,p.project_name,
		(select case a.abnormal_cause when null then 'Normal' else  concat('Abnormal,',a.abnormal_cause,':',TIMESTAMPDIFF(MINUTE,a.open_date,now()),'Min')  end 
		from  BMS_NA_PRODUCTION_ABNORMITY a 
		where a.bus_number=b.bus_number and a.workshop=#{workshop} and (a.measure_date &lt;=0 or a.measure_date is null)  
		<if test="station_id !=null and station_id !=''">
			and a.abnormal_station_id=#{station_id}
		</if>
		<if test="station !=null and station !=''">
			and a.abnormal_station like concat('%',#{station},'%')
		</if>		
		order by a.open_date desc limit 1) abnormal_cause,
		(select count(pl.id) from BMS_NA_BUS_PUNCH_LIST pl 
		where pl.bus_number=b.bus_number and (pl.quality_initials_date is null or pl.quality_initials_date='') ) punch_open,
		(select count(pl.id) from BMS_NA_BUS_PUNCH_LIST pl 
		where pl.bus_number=b.bus_number and pl.quality_initials_date>0 ) punch_closed,
		(select count(distinct e.ecn_item_id) from BMS_NA_ECN_ITEM_BUS e 
		where e.bus_number=b.bus_number and (e.qc_date is null or e.qc_date='') ) ecn_open,
		(select count(distinct e.ecn_item_id) from BMS_NA_ECN_ITEM_BUS e 
		where e.bus_number=b.bus_number and e.qc_date>0 ) ecn_closed
		from BMS_NA_PROJECT_BUS b
		left join BMS_NA_BASE_STATION s on s.id=b.latest_station_id
		left join BMS_NA_PROJECT p on p.id=b.project_id
		where b.production_plant_id=#{factory_id}
		<if test="workshop=='Welding'">
			and b.welding_online>0 and b.welding_offline &lt;=0 
		</if>
		<if test="workshop=='Painting'">
			and b.painting_online>0 and b.painting_offline &lt;=0 
		</if>
		<if test="workshop=='Chassis'">
			and b.chassis_online>0 and b.chassis_offline &lt;=0 
		</if>
		<if test="workshop=='Assembly'">
			and b.assembly_online>0 and b.assembly_offline &lt;=0 
		</if>
		<if test="workshop=='Outgoing'">
			and b.outgoing>0 and b.delivery &lt;=0 
		</if>
		 
		<if test="station_id !=null and station_id !=''">
			and s.id=#{station_id}
		</if>
		<if test="station !=null and station !=''">
			and s.station_name=#{station}
		</if>
		
	</select>
<!-- ########################### xiong jianwu end#############################-->	

	<select id="getVinTotalCount" parameterType="Map" resultType="int">
		SELECT count(1) FROM BMS_NA_PROJECT_BUS b
		LEFT JOIN BMS_NA_PROJECT p ON b.project_id = p.id
		where 1=1
		<if test="project_id !=null and project_id !=''">
			and p.project_id like CONCAT(#{project_id},'%')   
		</if>
	</select>
    <update id="batchUpdateVin" parameterType="List">
		<foreach collection="list" item="detail" index="index"
			separator=";">
			update BMS_NA_PROJECT_BUS set vin=#{detail.vin} where
			 bus_number=#{detail.bus_number} and project_id=#{detail.project_id}
		</foreach>
	</update>
	<select id="getBusNumberList" parameterType="Map" resultType="Map">
		SELECT b.*,p.project_no,f.factory_name plant,u.username FROM BMS_NA_PROJECT_BUS b
		LEFT JOIN BMS_NA_PROJECT p ON b.project_id = p.id
		LEFT JOIN BMS_NA_BASE_FACTORY f ON b.production_plant_id = f.id
		LEFT JOIN BMS_NA_BASE_USER u on u.id=b.printer_id
		where 1=1
		<if test="plant !=null and plant !=''">
			and b.production_plant_id=#{plant}  
		</if>
		<if test="project_no !=null and project_no !=''">
			and p.project_no=#{project_no} 
		</if>
		<if test="bus_number !=null and bus_number !=''">
			and b.bus_number=#{bus_number}  
		</if>
		<if test="print_flag !=null and print_flag !=''">
		    <if test="print_flag ==1">
			   and b.print_flag=#{print_flag}  
			</if> 
			<if test="print_flag ==0">
			   and IFNULL(b.print_flag,0)=#{print_flag}  
			</if> 
		</if>
		ORDER BY p.id desc,b.id asc
		<if test="start !=null and length !=-1 ">
			LIMIT #{start} ,#{length} 
		</if>			
	</select>
	
	<select id="getBusNumberTotalCount" parameterType="Map" resultType="int">
		SELECT count(b.id) FROM BMS_NA_PROJECT_BUS b
		LEFT JOIN BMS_NA_PROJECT p ON b.project_id = p.id
		LEFT JOIN BMS_NA_BASE_FACTORY f ON b.production_plant_id = f.id
		where 1=1
		<if test="plant !=null and plant !=''">
			and b.production_plant_id=#{plant}  
		</if>
		<if test="project_no !=null and project_no !=''">
			and p.project_no=#{project_no} 
		</if>
		<if test="bus_number !=null and bus_number !=''">
			and b.bus_number like CONCAT(#{bus_number},'%')   
		</if>
		<if test="print_flag !=null and print_flag !=''">
		    <if test="print_flag ==1">
			   and b.print_flag=#{print_flag}  
			</if> 
			<if test="print_flag ==0">
			   and IFNULL(b.print_flag,0)=#{print_flag}  
			</if> 
		</if>
	</select>
	<update id="updateVinPrint" parameterType="Map">
		update BMS_NA_PROJECT_BUS
		<set>
			print_flag='1',printer_id=#{printer},print_date=#{printDate},print_times=ifnull(print_times,0)+1
		</set>
		where vin in
		<foreach collection="vinList" index="index" item="item" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</update>
	<select id="getProjectBusNumberList" parameterType="Map" resultType="Map">
		SELECT p.*,f.factory_name plant,u.username FROM BMS_NA_PROJECT p
		LEFT JOIN BMS_NA_BASE_FACTORY f ON p.production_plant_id = f.id
		LEFT JOIN BMS_NA_BASE_USER u on u.id=p.editor_id
		where 1=1
		<if test="plant !=null and plant !=''">
			and f.factory_name=#{plant}  
		</if>
		<if test="project_no !=null and project_no !=''">
			and p.project_no=#{project_no} 
		</if>
		<if test="status !=null and status !=''">
			and p.project_status=#{status}    
		</if>
		ORDER BY p.id DESC
		<if test="start !=null and length !='-1' ">
			LIMIT #{start} ,#{length} 
		</if>			
	</select>
	
	<select id="getProjectBusNumberCount" parameterType="Map" resultType="int">
		SELECT count(1) FROM BMS_NA_PROJECT p
		LEFT JOIN BMS_NA_BASE_FACTORY f ON p.production_plant_id = f.id
		LEFT JOIN BMS_NA_BASE_USER u on u.id=p.editor_id
		where 1=1
		<if test="plant !=null and plant !=''">
			and f.factory_name=#{plant}  
		</if>
		<if test="project_no !=null and project_no !=''">
			and p.project_no=#{project_no} 
		</if>
		<if test="status !=null and status !=''">
			and p.project_status=#{status}    
		</if>
	</select>
	
	<insert id="insertAbnormity" useGeneratedKeys="true" keyProperty="id" parameterType="Map">
	INSERT INTO BMS_NA_PRODUCTION_ABNORMITY
	(plant, workshop, line, abnormal_station_id, abnormal_station, bus_number, abnormal_cause_id, abnormal_cause, detailed_reason, open_date)
	VALUES(#{plant},#{workshop},#{line},#{abnormal_station_id},#{abnormal_station},#{bus_number},#{abnormal_cause_id},#{abnormal_cause},#{detailed_reason},#{open_date})
	</insert>
	
	<select id="getExceptionList" parameterType="Map" resultType="Map">
		SELECT * FROM BMS_NA_PRODUCTION_ABNORMITY E
		WHERE 1=1
		<if test="id !='' and id !=null">
		AND E.id=#{id}
		</if>
		<if test="factory !='' and factory !=null">
		AND E.plant=#{plant}
		</if>
		<if test="workshop !='' and workshop !=null">
		AND E.workshop=#{workshop}
		</if>
		<if test="line !='' and line !=null">
		AND E.line LIKE CONCAT('%',#{line},'%')
		</if>
		<if test="bus_number !='' and bus_number !=null">
		AND E.bus_number LIKE CONCAT('%',#{bus_number},'%') 
		</if>
		<if test="status == '1' or status == 1">
		AND E.measure_date IS NULL
		</if>
		<if test="status == '2' or status == 2">
		AND E.measure_date IS NOT NULL
		</if>
		<if test="start_time !='' and start_time !=null">
		AND E.open_date>=#{start_time}
		</if>
		<if test="end_time !='' and end_time !=null">
		AND E.open_date &lt;= #{end_time}
		</if>
		<if test="start !=null">
			LIMIT #{start} ,#{length} 
		</if>	
	</select>
	<select id="getExceptionCount" parameterType="Map" resultType="int">
		SELECT COUNT(id) FROM BMS_NA_PRODUCTION_ABNORMITY E
		WHERE 1=1
		<if test="id !='' and id !=null">
		AND E.id=#{id}
		</if>
		<if test="factory !='' and factory !=null">
		AND E.plant=#{plant}
		</if>
		<if test="workshop !='' and workshop !=null">
		AND E.workshop=#{workshop}
		</if>
		<if test="line !='' and line !=null">
		AND E.line LIKE CONCAT('%',#{line},'%')
		</if>
		<if test="bus_number !='' and bus_number !=null">
		AND E.bus_number=#{bus_number}
		</if>
		<if test="status == '1'">
		AND E.measure_date IS NULL
		</if>
		<if test="status == '2'">
		AND E.measure_date IS NOT NULL
		</if>
		<if test="start_time !='' and start_time !=null">
		AND E.open_date>=#{start_time}
		</if>
		<if test="end_time !='' and end_time !=null">
		AND E.open_date &lt;= #{end_time}
		</if>
	</select>
	<update id="measuresAbnormity" parameterType="Map">
		update BMS_NA_PRODUCTION_ABNORMITY SET responsible_department_id =#{responsible_department_id},responsible_department = #{responsible_department},measures = #{measures},measure_date=#{measure_date}
		where id=#{id}
	</update>
	
	<select id="getStationSquence" parameterType="Map" resultType="int">
		SELECT R.sequence+0 FROM BMS_NA_BASE_SCAN_RULE R WHERE R.factory = #{factory_name} AND R.workshop = #{workshop_name} 
		AND R.station_name = #{station_name}
	</select>
	<select id="getMatReqProjectQty" parameterType="Map" resultType="Map">
		SELECT P.id,P.project_id,P.plan_qty FROM BMS_NA_PROJECT_PRODUCTION_PLAN P WHERE 
		P.plant_id = #{factory_id} AND P.plan_code_value = '1' AND P.plan_date = #{curDate}
	</select>
	<select id="getBusNumberProject" parameterType="Map" resultType="Map">
		SELECT B.bus_number,B.project_id FROM BMS_NA_PROJECT_BUS B WHERE B.project_id = #{project_id} 
		AND (B.welding_online = '' OR B.welding_online IS NULL)
		<if test="bus_number !='' and bus_number !=null">
		AND B.bus_number = #{bus_number}
		</if>
		ORDER BY B.bus_number LIMIT ${planQty}
	</select>
	<select id="getBomListByProject" parameterType="Map" resultType="Map">
	SELECT T.item_no,#{station} AS 'station',#{bus_number} AS 'bus_number',T.SAP_material,T.BYD_NO,
	T.part_name,T.specification,T.quantity,T.unit,T.vendor, 
	(SELECT IFNULL(SUM(D.dis_quantity),0) FROM BMS_NA_LINE_DISTRIBUTION D WHERE 
	D.bus_number = #{bus_number} AND D.SAP_material = T.SAP_material) 
	AS dis_qty,
	(SELECT IFNULL(SUM(L.line_quantity),0) AS line_quantity FROM BMS_NA_LINE_INVENTORY L WHERE L.bus_number = #{bus_number}
	AND L.station = #{station} AND L.sap_material = T.SAP_material) AS line_quantity 
	FROM BMS_NA_PROJECT_BOM_ITEM T 
	WHERE T.bom_head_id = (SELECT H.id FROM BMS_NA_PROJECT_BOM_HEAD H WHERE H.project_id = #{project_id} ORDER BY H.version DESC LIMIT 1)
	AND station_code LIKE CONCAT('%',#{station_code},'%')
	</select>
	<select id="getLastStationInfo" parameterType="Map" resultType="Map">
	SELECT R.id,R.factory,R.workshop,R.station_name FROM BMS_NA_BASE_SCAN_RULE R 
	WHERE R.factory = #{factory_name} AND R.sequence = #{sequence}
	</select>
	<select id="getStationBusNumberProject" parameterType="Map" resultType="Map">
	SELECT S.project_id,S.bus_number FROM BMS_NA_BUS_SCANNING_RECORD S WHERE S.plant = #{factory_name} AND S.workshop = #{workshop_name}
	AND S.station = #{last_station_name} AND S.rework = '0' AND S.on_offline = 'offline'
	AND S.bus_number NOT IN 
	(SELECT S.bus_number FROM BMS_NA_BUS_SCANNING_RECORD S WHERE S.plant = #{factory_name} AND S.workshop = #{workshop_name}
	AND S.station = #{station_name} AND S.rework = '0' AND S.on_offline = 'online')
	<if test="bus_number !='' and bus_number !=null">
	AND S.bus_number = #{bus_number}
	</if>
	</select>
	<select id="getLineDisCount" parameterType="Map" resultType="int">
		SELECT COUNT(DISTINCT(dis_no)) AS dis_count FROM BMS_NA_LINE_DISTRIBUTION WHERE dis_no LIKE CONCAT('%',#{dis_date},'%')
	</select>
	<insert id="insertLineDistribution" useGeneratedKeys="true" keyProperty="id" parameterType="Map">
	INSERT INTO BMS_NA_LINE_DISTRIBUTION
	(dis_no, station_id, station, bus_number, sap_material, byd_no, part_name, specification,
	required_quantity, dis_quantity, unit, vendor, create_user, create_time)
	VALUES(#{dis_no},#{station_id},#{station},#{bus_number},#{sap_material},#{byd_no},#{part_name},#{specification},
	#{required_quantity},#{dis_quantity},#{unit},#{vendor},#{create_user},#{create_time})
	</insert>
	
	<select id="getMaterialReception" parameterType="Map" resultType="Map">
	SELECT * FROM BMS_NA_LINE_DISTRIBUTION WHERE dis_no = #{dis_no} AND remove = 0
	</select>
	<select id="getDistributionReceptionUser" parameterType="Map" resultType="String">
	SELECT reception_user FROM BMS_NA_LINE_DISTRIBUTION WHERE dis_no = #{dis_no} LIMIT 1
	</select>
	<update id="updateLineDistributionReception" parameterType="Map">
		UPDATE BMS_NA_LINE_DISTRIBUTION SET reception_user =#{reception_user},reception_time = #{reception_time}
		WHERE dis_no=#{dis_no}
	</update>
	<select id="getLineInventoryQty" parameterType="Map" resultType="int">
	SELECT IFNULL(SUM(line_quantity),0) AS line_quantity FROM BMS_NA_LINE_INVENTORY 
	WHERE bus_number = #{bus_number} AND sap_material = #{sap_material} AND station_id = #{station_id}
	</select>
	<update id="updateLineInventoryQty" parameterType="Map">
		UPDATE BMS_NA_LINE_INVENTORY SET line_quantity = line_quantity + ${dis_quantity}
		WHERE bus_number = #{bus_number} AND sap_material = #{sap_material} AND station_id = #{station_id}
	</update>
	<insert id="insertLineInventory" useGeneratedKeys="true" keyProperty="id" parameterType="Map">
	INSERT INTO BMS_NA_LINE_INVENTORY
	(station_id, station, bus_number, sap_material, byd_no, part_name, specification, required_quantity, 
	unit, line_quantity, print_quantity, vendor)
	VALUES(#{station_id},#{station},#{bus_number},#{sap_material},#{byd_no},#{part_name},#{specification},#{required_quantity},
	#{unit},#{dis_quantity},'0',#{vendor})
	</insert>
	<select id="getDistributionCount" parameterType="Map" resultType="int">
	SELECT COUNT(id) AS dis_count FROM BMS_NA_LINE_DISTRIBUTION WHERE dis_no = #{dis_no} AND remove = 0
	</select>
	<select id="getLineInventoryList" parameterType="Map" resultType="Map">
	SELECT d.dis_no,d.station,d.bus_number,count(d.dis_no) AS dis_num,d.create_user,d.create_time,d.reception_user,d.reception_time,
	s.factory,s.workshop,s.line,s.station_name
	FROM BMS_NA_LINE_DISTRIBUTION d left join BMS_NA_BASE_STATION s on d.station_id = s.id 
	WHERE d.create_time >= #{start_date} AND d.create_time &lt;= CONCAT(#{end_date},' 23:59:59') AND d.remove = 0
	<if test="factory_name !='' and factory_name !=null">
	AND s.factory = #{factory_name}
	</if>
	<if test="workshop_name !='' and workshop_name !=null">
	AND s.workshop = #{workshop_name}
	</if>
	<if test="line !='' and line !=null">
	AND s.line = #{line}
	</if>
	<if test="station_name !='' and station_name !=null">
	AND s.station_name = #{station_name}
	</if>
	<if test="bus_number !='' and bus_number !=null">
	AND d.bus_number = #{bus_number}
	</if>
	<if test="dis_no !='' and dis_no !=null">
	AND d.dis_no = #{dis_no}
	</if>
	<if test="status == 1">
	AND d.reception_user IS NOT NULL
	</if>
	<if test="status == 2">
	AND d.reception_user IS NULL
	</if>
	group by d.dis_no 
	order by d.create_time DESC
	</select>
	<update id="removeDistribution" parameterType="Map">
		UPDATE BMS_NA_LINE_DISTRIBUTION SET remove = '1'
		WHERE dis_no = #{dis_no} AND reception_user IS NULL
	</update>
	
	
	
	<select id="getProductionSearchBusinfo" parameterType="String" resultType="Map">
		SELECT b.id,p.project_no,p.project_name,p.bus_type,p.quantity,f.factory_name,
		b.bus_number,b.vin,p.customer,b.welding_online,b.welding_offline,b.painting_online,
		b.painting_offline,b.chassis_online,b.chassis_offline,b.assembly_online,
		b.assembly_offline,b.testing,b.outgoing,b.delivery
		FROM BMS_NA_PROJECT_BUS b
		LEFT JOIN BMS_NA_PROJECT p ON b.project_id = p.id
		LEFT JOIN BMS_NA_BASE_FACTORY f ON b.production_plant_id = f.id
		WHERE b.bus_number = #{bus_number} OR b.VIN = #{bus_number}
	</select>
	
	<select id="queryEcnBusListByBusNo" parameterType="String" resultType="Map">
		select b.bus_number,i.work_station,b.confirmed_date,b.qc_date,b.production_people,b.qc,pb.production_plant_id,f.factory_name plant
		,i.items,i.problem_details from BMS_NA_ECN_ITEM_BUS b
		left join BMS_NA_ECN_ITEM i on b.ecn_item_id=i.id
		left join BMS_NA_PROJECT_BUS pb on pb.bus_number=b.bus_number
		left join BMS_NA_BASE_FACTORY f on f.id=pb.production_plant_id
		where 1=1 and b.bus_number=#{bus_number}    
	</select>
	<select id="getBusNumberScanList" parameterType="String" resultType="Map">
		select s.*,u.username scanner from BMS_NA_BUS_SCANNING_RECORD s
		left join BMS_NA_BASE_USER u on s.scanner_id=u.id
		where 1=1 and s.bus_number=#{bus_number}    
	</select>
</mapper>
